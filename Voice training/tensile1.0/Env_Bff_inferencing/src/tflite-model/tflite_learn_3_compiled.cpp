/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 21.12.2024 22:42:11

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 22720;
#else
constexpr int kTensorArenaSize = 21696;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,10304 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0036151960957795382, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 322, 32, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[4] = { 1, 322, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 161, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[4] = { 1, 161, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data5[2] = { -1, 1296, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data6[3] = { -6514, 968, 570, };
const TfArray<1, int> tensor_dimension6 = { 1, { 3 } };
const TfArray<1, float> quant6_scale = { 1, { 0.00010457955067977309, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[3*1296] = { 
  -9, -33, -32, -15, -1, -8, 36, -16, -10, -7, 15, 16, 11, -36, 14, -91, -21, -3, -27, -10, -6, 0, 25, -13, -11, 7, 28, 9, -2, -13, 20, -56, -20, -28, -36, -17, 3, -6, 21, -13, -4, -6, 5, -1, 2, -5, 13, -61, -33, -33, -30, -18, 1, 1, 18, -16, -1, 1, 3, 6, -6, -28, 24, -57, -16, -31, -27, 3, -7, -2, 23, -11, -37, -2, 2, 1, -7, -19, 13, -57, -9, -26, -32, -14, 4, -6, 20, -13, -8, 6, -8, 0, -11, -16, -1, -39, -3, -1, 0, 3, -2, 5, 3, -9, 0, -8, -11, 1, 8, 1, 0, -7, 15, 1, 8, -3, 2, 3, -22, 2, 2, -2, 17, -8, 0, 14, -17, 8, 4, -23, -18, 0, 0, 0, 9, -12, -19, 0, -3, -8, -2, -20, 7, -28, -33, -34, -54, 7, 2, 3, 20, -14, -5, -13, 3, 2, 1, -10, 8, -57, -18, -34, -56, -5, 1, -1, 18, -15, 13, 4, 2, 1, -5, -17, 0, -45, -10, -27, -40, 4, 3, 4, 5, -3, -3, 20, 2, -5, -1, -42, 15, -50, -5, -28, -51, -5, 2, 5, 10, -3, 2, 15, -6, 11, -1, -21, 4, -36, -16, -15, -14, -3, 4, -8, 6, 0, -6, 2, 0, 4, -9, 4, -4, -12, -15, -15, -33, -2, 0, -1, 6, -2, 6, -2, 1, -1, -6, -13, 0, -42, -1, -15, -21, -7, 6, -1, 4, -17, 3, 8, 0, 10, 5, 14, -2, -36, -7, -13, -34, 1, 0, 12, 1, -3, -7, 10, 0, 2, 2, -10, 4, -46, 7, -23, -44, -11, -2, -7, 15, 4, 2, 13, 4, 10, 2, -14, -3, -44, 5, -30, -51, -8, -4, -7, -2, 5, 10, 12, -7, 5, -4, -32, 6, -25, -12, -9, -28, -8, -5, -8, 10, -3, 1, 8, 11, 1, -1, -23, 3, -38, -7, -16, -28, -1, 1, -2, 14, -14, -4, 8, -6, 1, 1, -24, -2, -32, -12, -19, -5, -14, -2, -5, 5, -13, -5, 2, -8, 1, -11, -7, 13, -35, -7, -32, -30, -3, 2, -4, 15, -21, -14, -13, 2, -7, -7, -8, 3, -44, 2, -5, -29, 3, -6, 14, 13, -17, -15, -13, 4, 3, -17, 2, -3, -55, -17, -11, -21, 9, -5, -2, 8, -12, -16, 9, 7, -10, -13, -8, 14, -39, 4, -36, -36, -2, 1, -8, 8, -1, 3, 1, -14, -1, -3, -9, -1, -49, -5, -25, -33, -12, -3, -5, 14, -11, -6, -1, 3, 6, 2, -13, 6, -54, -31, -27, -26, -11, 1, -5, 0, -14, 2, 6, 6, -1, 3, -18, -4, -41, 1, -17, -34, -12, 3, -7, 18, -31, 0, 6, -3, 0, -10, -7, -8, -57, 5, -1, 5, -3, 3, -1, 11, -21, -4, -8, -11, -3, 5, -8, -4, -6, 4, 5, -12, -7, -3, 0, -19, -1, 1, -1, -3, -4, -3, -1, -5, 4, -9, -8, -31, 4, 1, -2, 14, -11, 3, -2, -5, -1, 3, 3, -2, -40, -16, -11, -23, 1, -4, -6, 11, -4, -22, -9, 4, 7, 1, 11, -8, -44, -5, -5, -27, -3, 0, 5, 15, -14, -17, -5, 1, 13, 4, -3, 8, -66, 5, -19, -20, 8, -3, -4, 14, -8, 3, 6, 5, 7, -2, -23, 0, -46, -15, -6, -24, 3, -2, 2, 20, -26, -15, 6, 8, 14, 1, -22, -6, -60, -22, -5, -21, 0, 3, -9, 20, 2, -8, 2, -3, 8, -3, 0, 6, -23, 8, 4, 15, -3, -3, 3, 4, -1, 3, -2, 16, -4, -3, 8, -2, 16, -7, 12, 0, 5, -2, 2, 14, -14, -5, 5, 17, 5, 0, -14, 0, -23, 3, -22, -24, -3, 0, -9, 26, -23, 8, -3, 14, 10, 7, -23, 17, -62, -12, 2, -24, -3, 1, -5, 18, -19, -24, 2, 11, 5, -3, -26, 0, -83, -16, -2, -7, -13, -2, -14, 17, -26, -13, 1, 12, 4, -10, -7, 4, -59, -5, 9, 12, 1, 9, 1, 3, -2, -4, -2, -2, -13, -1, 19, 8, -3, 1, 7, 2, 0, -3, -2, 2, 0, -6, 1, 16, -16, 9, -9, 4, 16, -13, -18, 5, 2, 1, 4, -8, 2, 3, -4, -19, -16, -1, -1, -11, -9, 6, -21, -10, -4, -2, -1, 21, -24, -20, 2, 9, 8, 6, -2, 20, -57, -12, -9, -25, -12, -1, -9, 10, 2, 6, 4, 9, 10, 2, -22, 2, -44, 6, -17, -22, -7, -3, -5, 15, -16, -19, 6, -9, 15, 1, 19, 16, -85, -11, -19, -26, -3, -6, 6, 13, -16, -8, -3, 11, 4, -10, -13, 1, -64, -13, -10, -26, -4, 0, -2, 11, -12, -28, 5, 12, 4, 6, -4, -4, -53, -1, -9, -31, -16, -2, 4, 10, -6, -15, 0, 8, -4, -14, -10, -5, -56, -7, -7, -35, 0, -1, -1, 10, -17, 7, -5, 9, -3, 4, -12, 9, -63, -17, 2, -16, -5, -2, 7, 8, -13, -36, 0, 14, 1, -4, -14, 3, -47, -4, -26, -29, -5, -3, -3, 9, -8, 0, 8, -3, 4, -13, 9, 5, -84, -6, -24, -38, 0, -1, -6, -3, -4, -12, 23, -10, 3, -9, 2, -1, -64, -17, -16, -17, 8, -2, -11, 16, -11, 3, -4, 3, 9, -5, 3, 0, -66, -13, -14, -7, -10, -4, 9, 7, -8, -10, 5, 15, 9, 8, -8, -1, -69, -12, -14, -46, -11, -4, 1, 9, -21, -5, 13, 5, 3, -7, -24, 0, -86, -19, -23, -12, -2, -5, 5, 17, -3, -6, 1, 1, 11, -4, -15, 9, -80, -18, -5, -24, 2, -1, -10, 7, -2, -23, 4, 2, 7, -10, -19, 1, -79, -12, -17, -22, -1, -2, 10, 5, -10, 13, 9, 1, 7, 6, -17, -8, -92, -13, -19, -29, -2, -5, -8, 14, -22, 4, -15, 9, 5, 10, -22, 1, -62, -21, 2, 14, 1, -4, 0, 0, 0, -10, 0, 7, -5, -1, -18, -11, 6, 4, 5, -2, 0, 4, -3, 2, 3, 3, 1, 0, -8, 1, -7, 1, 18, -2, -3, -1, -2, 1, -1, 16, -9, 4, -14, 13, -6, 3, -5, -1, 5, 6, -3, -3, -1, 1, 9, 7, -18, -6, -10, -6, -15, -1, -16, 7, -29, -14, -12, -30, -6, -6, -8, 10, -19, 0, -2, 14, 3, -7, -24, -1, -58, -2, -18, -12, 8, -4, -8, 9, -2, 2, -1, -8, 9, -1, 2, 7, -71, 4, -9, -23, 5, 4, -2, 13, -31, -19, 5, -3, -1, -2, 2, -9, -64, -10, -5, -29, 3, -2, -2, 1, -10, -5, 12, 4, -3, -7, -6, -1, -41, 13, -25, -41, -4, 6, 3, -1, -4, 16, 7, -10, 3, 1, -1, 11, -40, -4, -23, -34, -5, -3, -7, 13, 2, -17, 0, 4, 5, 0, -19, 0, -53, -14, -29, -24, 1, 2, -7, 9, -21, 11, 11, 18, -1, -7, 11, -2, -38, -27, -26, -38, 2, -4, -1, 17, -19, -12, 11, -1, 10, 11, -17, -1, -52, 1, -31, -26, 4, -9, -4, 0, -16, -14, -1, 1, 7, 7, -12, 9, -66, -20, -16, -37, -6, 0, -1, 14, -12, -6, -2, -3, -1, -4, -11, 8, -52, -25, -11, -26, 3, 0, 8, 11, -3, 10, 10, 13, 10, -5, -6, -1, -70, 9, -8, -24, -3, 4, 4, 16, 7, 1, 6, 5, 7, -2, -14, 1, -51, -10, 6, -40, -2, 0, -1, 2, -5, 4, 11, 1, 14, -6, 3, -2, -40, -26, -17, -58, 8, 2, 16, 5, -4, 13, 15, -7, 17, 5, 0, 0, -52, 8, -15, -30, 12, 2, 1, 16, 8, -3, -1, 9, 16, 7, -11, -9, -46, 
  -12, 24, 10, 10, -7, 8, -12, 15, 12, 17, 7, 3, -5, 0, -17, 15, -2, 12, 10, 12, 5, 4, -7, 11, 5, -2, 1, 12, 7, -18, -12, 8, -2, 26, 8, 15, 3, 4, -8, 18, 11, 12, 12, 18, 2, -11, -7, 4, 6, 21, 11, 16, 2, -1, -8, 21, 12, 3, 13, 5, 12, -6, -21, 9, -4, 27, 11, 3, 4, 8, -11, 15, 35, 10, 8, 13, 12, -22, -17, 3, -10, 28, 17, 13, -2, 13, -9, 14, 11, 3, 18, 15, 18, -23, -5, 4, -3, -8, 1, -4, 0, -5, -6, 9, -5, 10, 13, 6, -3, -11, -15, 6, -2, -7, 3, 5, -3, 3, 15, -1, -14, 0, -25, 0, -6, -17, 6, -11, -1, 4, 4, 5, -1, -4, 0, 6, 12, -1, 10, 14, 7, 14, -6, 2, -5, 28, 11, -6, 5, 0, -10, 10, 9, 20, 4, 9, 6, -8, -12, 9, -3, 15, 16, 9, -4, 4, -9, 12, -11, 1, 2, 5, 12, -21, -6, 9, -5, 5, 9, -9, -2, -1, 1, 9, 6, -15, 4, 11, -1, 2, -9, 5, -2, 7, 4, 5, -2, 2, -2, 7, 1, -8, 18, 2, 6, -9, -12, 2, -3, 12, 4, 6, -3, 4, -9, 1, 13, 4, 5, 5, 13, -1, -4, 5, -13, 19, 14, 5, -4, 1, -1, 3, 5, 10, 4, 10, 11, -28, 2, 5, -11, 6, -2, 8, 0, 3, 2, 23, 1, -8, 5, 5, 5, -27, -3, 3, -3, 13, 3, 2, -2, -18, 4, 5, 11, -5, 5, 9, -1, -18, -15, -1, -21, 14, 14, 5, 6, -1, -10, -6, -5, -13, -3, -7, 2, 5, -8, 6, -6, 19, 4, 1, -3, 7, 3, 5, -3, -15, 12, -1, 7, -5, -14, 5, -10, -1, 5, -2, 1, 10, -6, 4, -1, -1, -7, 6, 4, 5, -11, 8, -9, 11, 3, 7, 1, 9, -11, 23, 5, -7, 6, 0, 1, -46, -8, 2, -9, 5, 2, 14, -6, 4, 3, 15, 5, 1, 10, 9, 12, -8, -13, 5, -10, 20, 14, -2, 3, 8, -11, 17, 7, 17, 2, 13, 12, -9, -7, 4, -17, 6, 10, -3, 0, -13, -11, 19, 21, 22, -4, 5, 14, 7, -2, 8, -6, 8, -5, -6, 2, -2, -1, 6, 16, -5, -4, 14, 17, -35, -9, 5, -14, 26, 6, -2, 4, 6, -5, 4, 7, 2, 12, 4, 7, -8, -7, 5, -15, 18, 8, 11, -9, 8, -1, 13, 1, 7, 6, 0, -2, -11, -5, -1, 1, 7, 3, 5, -2, 6, 0, 25, 7, -4, -8, 5, 1, -37, -9, 2, -18, 12, 8, 15, -2, 8, -14, 30, 3, -1, 14, 6, 14, 2, -1, 4, -1, -6, -7, 9, 5, 4, -6, 13, 11, 15, 17, 9, -2, -3, -1, 0, 4, -13, -6, 2, 0, -8, 14, -8, 0, 3, -9, 8, 1, -29, 3, -2, -10, 7, 7, -1, 0, -3, -7, 9, -6, 0, 15, 11, 1, 1, -9, 8, -10, 1, -1, 0, 4, 13, -9, 5, 19, 11, 6, 1, 5, -37, -1, 6, -5, -3, 9, 4, 5, -5, -12, 21, 19, 10, 6, -5, 0, -13, -10, 6, -20, 10, 3, -7, -4, 7, -13, 13, -3, 3, 0, 5, 1, 0, -17, 9, 3, 9, 5, -5, -1, 2, -10, 28, 14, 2, -3, -4, 8, -6, -7, 9, 2, 4, 7, 4, 1, 14, -7, 6, 15, -1, 2, 2, 12, 9, -12, 6, -7, -1, -13, -5, -6, -3, -1, -10, -1, 1, -4, 10, -2, -17, -6, -1, -5, 1, 4, -2, 6, -5, -8, 9, 3, -3, -11, 7, -8, -3, -11, 3, -9, 7, 8, 3, 5, 11, -18, 28, 0, 15, -6, 4, 0, -15, -16, 10, -9, -1, 8, 1, 0, 14, -13, 19, 31, 4, -2, 7, 8, -20, -9, 11, -4, 5, -3, 10, 6, 15, -11, 25, 17, 5, -1, 10, 19, -12, -11, 8, -1, -4, 4, 2, -4, -6, -13, -4, -1, 2, 7, 20, 2, -27, -6, 2, 4, 0, 3, -1, 2, -2, 4, -1, 1, -2, -8, 2, -11, -2, -1, -3, -2, 10, 3, -3, 2, -6, -1, -4, -4, 8, 17, 13, 8, -17, 10, -1, -13, 20, -5, 4, 1, 1, -11, 31, 27, -3, -4, 5, 0, -5, -19, 5, -6, 18, 7, 6, -4, 8, -7, 1, -2, 4, 1, -4, -2, 4, -15, 3, -13, 7, 8, 2, 0, 5, -10, 12, 19, -2, 14, -4, -1, -28, -10, 11, -4, -14, 2, 7, 4, 5, -6, 12, 12, 3, -5, 1, 15, -20, -12, 5, -8, 3, -8, 0, 4, 10, -10, 18, 28, -2, -5, 2, -3, -19, -11, 5, -4, 4, -1, 15, -3, -3, -9, 13, 19, 3, 1, 12, 13, -8, -7, 6, -7, -1, -2, 3, -2, 5, -7, 16, -5, 11, 1, 7, -1, -4, -12, 12, -4, 2, -4, 7, -5, -9, -4, 12, 34, 3, -5, 6, 7, -22, 0, 5, -10, 17, 1, 0, -3, 0, -2, 7, 2, -2, 7, 6, 17, -15, -5, 6, -7, 9, 4, 1, -3, 9, 4, 11, 17, -19, 14, 6, 17, -13, -5, 6, -7, 7, -5, -7, 3, 11, -16, 13, -9, 12, 1, 0, 7, -9, -12, 4, -10, 19, -1, 10, 3, -4, -3, 13, 16, -1, -9, 1, -3, -3, -11, 9, -7, -1, 13, 7, 0, 3, -4, 19, 10, -11, 4, 3, 11, -16, -13, 7, 4, 6, -9, 9, 5, -7, -8, 12, 7, 4, 5, -1, 10, 6, -14, 5, -8, -7, 1, 3, 3, 17, -7, 1, 25, 1, 1, 3, 10, -9, -2, 11, -7, 6, 1, -1, 0, -3, 0, 7, -8, -2, 5, 2, 1, -22, -3, 12, -2, 0, 12, 6, 4, 7, -3, 26, -7, 18, -7, 7, -9, -13, 1, 3, 9, -10, -10, -1, 2, -3, 0, 0, 8, -3, -2, 11, 4, -3, -1, 5, 5, 4, -1, -3, -2, -1, 9, -4, -2, 0, 5, 18, -3, -1, -1, 0, 2, 3, -5, 2, 4, 6, -11, 9, 4, 17, -16, 7, -1, -10, 9, 0, -10, -7, 4, 0, 1, -9, -8, 20, 10, 9, 9, 19, -3, 12, -9, 4, 0, 4, 1, 9, -3, 14, -10, 12, 3, 4, -4, 6, 12, -10, -2, 2, -5, -4, -10, -6, -2, 12, -5, 2, 0, 7, 12, 3, 3, -36, -10, 8, -9, 6, -3, -2, -7, 5, -6, 31, 27, -1, 10, 7, 11, -24, -6, 6, -5, 3, -3, -3, 1, 8, 1, 11, 4, -8, -1, 9, 5, 3, -11, 1, -15, -10, 13, 2, -2, 1, 1, 10, -10, 0, 14, 6, 1, -16, -14, 9, -4, 1, 5, 3, -4, 12, -3, -8, 10, 7, -2, 3, -3, -24, -4, 3, -9, 16, 5, -3, 2, 2, -8, 13, -5, -12, -12, 5, 8, -9, -4, 7, 3, 13, 0, 0, -2, 4, -15, 17, 15, -4, 8, -2, -3, -3, -5, 6, -8, 17, 7, -2, 1, 5, 1, 12, 8, 5, 3, 1, -5, -4, -14, 2, -2, 0, 3, 5, 6, 1, -8, 13, 12, 9, 8, 7, 6, -17, -10, 8, 3, -4, 1, -2, -5, -2, -10, 6, -11, -6, -6, -3, 9, 4, -14, 4, -9, 2, -12, 6, -3, -6, -15, 1, 7, -5, -2, -4, 7, -10, -15, 10, -2, -9, -2, 2, 0, 5, -2, 7, 1, -11, 5, -6, 9, -1, -15, 7, -5, 11, 9, -7, 1, -7, -9, 10, -3, -14, 9, -5, -5, -29, -10, 3, -7, 0, -3, -3, -6, 0, -19, -11, 8, 3, -9, -10, -6, -36, 2, 8, 
  15, 0, 10, 1, 1, -1, -46, -14, -7, -13, -92, -84, -11, 15, 11, 8, 18, -10, 1, 2, 1, 0, -46, -2, 0, -6, -117, -127, -12, 16, 2, 3, 15, -8, 11, 2, -1, -3, -36, 1, -9, -13, -101, -112, -6, 11, 0, 8, 12, -6, 2, -2, 0, -5, -37, -4, -14, -8, -102, -97, -5, 7, -2, 5, 16, -5, 6, -2, 3, -6, -24, -3, -8, -8, -75, -62, -10, 44, 4, 9, 14, -14, 1, -6, 2, -9, -23, -7, -5, -7, -84, -100, -12, 29, 8, 8, 4, 10, 3, 6, -2, 3, 4, 0, 12, -4, -16, -20, -9, 12, 19, 1, -4, 3, -3, -6, -2, 0, 5, 1, 15, 0, 7, 9, 1, 9, 0, 2, -2, 8, 5, 0, 3, -2, -18, 3, 1, -6, -46, -16, 1, -11, 5, 7, 20, -8, 21, 5, -6, -3, -18, -2, -14, -6, -67, -82, -13, 4, 8, 7, 18, 7, 11, -1, 3, -3, -13, 0, -6, -10, -47, -31, -7, 26, 8, 3, 11, 6, 11, 11, -3, -4, -21, -12, -5, -6, -55, -63, -3, 26, -2, 9, 11, 6, 22, 0, 8, -11, -29, 5, -11, -6, -75, -84, -4, 17, 16, 5, 10, -11, 3, -3, 0, 3, -7, -10, -8, -7, -45, -51, -5, 3, 5, 3, 12, -14, 6, 0, 3, 0, 12, -3, -6, -9, -31, -59, -10, 40, -3, 4, 13, 15, 10, 0, -2, -3, -15, -9, -8, -1, -24, -73, -8, 20, -2, 3, 4, -6, 13, 0, -1, 2, -11, 4, -6, -2, -40, -59, 0, 28, 12, 10, 15, 3, 7, 2, -4, 5, -24, -9, -3, -3, -21, -53, -3, -2, 3, 4, 0, -3, 18, 2, 0, -6, -6, -6, -10, -7, -8, -44, -6, 23, 13, 5, 21, 11, 3, 8, -1, 1, -3, 3, -2, -5, -44, -51, -7, 7, 9, 4, 12, -1, 9, -3, -1, -5, -9, -4, 2, -1, -14, -52, -2, 57, 13, 8, 16, 9, 1, -1, 5, 0, -6, 0, 0, -7, -25, -54, 5, 12, 9, 3, 14, -2, 2, 2, 2, -2, -3, 1, 1, -6, -34, -56, -2, 16, 10, 5, 13, -1, 14, 1, 2, 1, -6, -1, -6, -6, -38, -35, -5, -3, 4, 6, 10, -1, 9, -3, -2, -1, -12, 1, -4, -2, -42, -54, -1, 35, -1, 3, 9, -4, 9, 1, -2, -3, -10, -7, -10, 0, -10, -38, -2, 13, 15, 9, 18, -4, 5, 0, 6, 1, -19, 3, 2, -5, -26, -65, -5, 13, 3, 5, 16, 12, 12, 1, 8, -4, -5, -9, -13, -3, -20, -67, -7, 42, 12, 8, 12, 0, 8, -2, 0, -4, -15, -6, -12, -6, -67, -82, -10, 5, 8, 6, 5, 1, 2, -5, -3, 1, -11, 7, -8, -5, -38, -56, -4, 12, 8, 8, -2, 13, 12, 3, 1, 7, 12, 10, -7, -3, 29, -6, 1, 33, -1, 0, 12, -7, 3, -3, 1, 4, -3, 2, 1, 2, -39, -77, -2, 5, 28, 1, 13, 15, 14, -3, -1, -3, -2, 0, 0, -5, -35, -58, -9, 44, 9, 5, 10, 4, 1, 2, -5, -3, -1, -1, -9, -10, -42, -64, -4, 9, 9, 6, 17, 2, 9, 1, 5, -2, -8, -7, -16, -8, -59, -76, -2, 25, 16, 5, 7, 0, 12, -1, 4, -3, -18, -12, -9, -15, -54, -83, -8, 15, 3, 4, 7, 0, 2, -3, -2, -4, -34, -3, -9, -7, -37, -91, -4, -1, 5, 2, 2, -3, 4, 3, 4, 1, -14, 4, 3, 2, -8, -17, 0, 18, 5, -2, 6, -10, 0, -3, -4, 4, 0, 3, 0, -5, -21, -24, 3, 11, 4, 6, 7, 8, -1, 2, -2, -4, -18, -11, -27, -18, -60, -84, -19, 20, 5, 6, 18, -5, 6, -1, 0, -10, -18, -12, -8, -9, -68, -93, -6, 32, 8, 5, 15, -1, 13, 1, -1, -2, -21, 1, -18, -11, -59, -96, -14, 21, 11, 8, 5, -1, -10, -5, 1, 1, 20, 4, 0, 0, -12, -31, 5, 4, 2, 1, -5, -8, -2, -1, -4, -1, 0, -4, 1, -1, -2, 9, -2, 2, 1, -8, 1, 7, 0, -1, 0, 5, 20, 3, 5, -2, 12, 1, -9, 20, -1, 4, 4, -8, 7, -1, 7, -2, -24, -7, -5, -4, -67, -95, -7, 4, 7, 2, 10, -10, 10, -3, 5, -1, -10, 0, -8, -5, -80, -66, -10, 10, 25, 5, 11, 13, 6, 2, 6, -2, -23, 4, 3, -4, -40, -77, -3, 16, 6, 8, 7, 28, 13, -4, 1, -5, -15, 0, -3, -3, -29, -38, -5, 23, 9, 9, 15, 1, 23, 4, -3, -4, -11, -9, 4, 0, -58, -51, -7, 20, 17, 5, 2, 9, 17, 3, -1, -1, -11, -14, -1, -3, -55, -53, -7, 6, 10, 6, 12, 7, 18, -4, 2, -2, -4, 1, 11, -12, -56, -58, -7, 8, 9, 5, 14, 2, 9, -1, 3, -3, -8, -3, 9, -7, -37, -45, -2, 32, 4, 5, 10, 1, 15, 0, 0, -3, -26, -4, 4, -13, -68, -58, -2, 8, -5, 6, 11, 11, 7, 2, -1, -4, -2, -8, -12, -5, -55, -74, -8, 2, 9, 3, 13, 2, 9, -2, -1, -1, 2, -2, 11, -5, -36, -65, -7, -3, 0, 9, 11, -5, 6, 2, 1, -2, -20, -15, -6, -7, -54, -59, -7, 12, 12, 5, 9, 14, 6, 3, 1, -3, 2, -9, -13, -8, -41, -59, 1, 38, 18, 11, 9, 7, 13, -5, -4, 3, -16, -10, -5, -8, -34, -69, -17, 15, 10, 5, 18, 12, 7, -4, -3, -10, -2, -12, -1, -10, -35, -59, -7, 18, 10, 5, 13, 10, 14, 3, -2, -9, -7, 0, -11, -13, -53, -72, -4, 32, 5, 4, 16, 12, 11, -1, -4, 1, -29, -2, -1, -13, -12, -70, -3, 28, 7, 8, 1, 6, 2, 3, 7, 4, -2, 3, 4, 1, -4, -6, 0, 8, 5, -10, -3, -8, -6, -1, -3, 4, -9, -5, -3, 2, -5, -14, 2, 6, -2, -5, -1, -5, 2, 1, -3, -2, 5, -5, -10, 2, 4, -10, -2, 14, -8, -3, 10, 6, -2, -1, 3, 0, 7, -15, 0, -10, -40, -65, 4, -4, 2, 2, 7, 7, 16, -6, 6, -4, 14, 4, -11, -8, -48, -74, -7, 15, 4, 5, 9, 19, 14, 1, 5, -4, 8, -8, -12, -12, -48, -72, -8, 33, 6, 3, 9, 1, 18, -3, 4, -3, -9, 2, -4, -3, -33, -36, -12, 21, 14, 8, 3, 0, 21, -1, 0, -8, -19, -6, -2, -7, -37, -61, 2, 3, 14, 3, 4, 32, 7, -4, -5, -1, 18, -4, -10, -8, -32, -59, -4, 23, 13, 4, 6, 17, 15, -1, 6, -6, -17, 11, -3, -10, -10, -58, 9, 33, 3, 4, 15, 5, 4, 6, -1, -1, -4, 1, -5, -2, -30, -43, 0, 6, 7, 3, 18, 0, 20, -1, 1, -5, 0, -2, -13, -8, -25, -63, -4, 20, 12, 3, 15, 0, 9, -1, 5, -3, -13, 4, 11, -3, 5, -24, -7, 6, 13, 10, 12, 12, 20, -2, -4, -2, -5, -5, -8, -2, -20, -34, -10, 30, 3, 5, 16, 13, 13, -3, 5, -3, 16, 2, -9, -6, -7, -46, -2, 0, 20, 6, 10, 4, 21, -4, -3, -2, 7, -16, -16, -5, -31, -27, -3, 18, 9, 5, 13, 4, 29, -8, 2, -3, 8, -11, -8, -10, -30, -54, -8, 2, 22, 4, 17, 1, 22, -1, -2, -4, 6, -3, -14, -5, -18, -44, -8, 38, 12, 10, 8, 10, 14, -19, 3, -2, 13, 1, -18, -2, -37, -47, -15, 44, 3, 5, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 3,1296 } };
const TfArray<1, float> quant7_scale = { 1, { 0.021635612472891808, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { -500, -1335, 1866, -8358, -5276, -5586, 1991, -4124, -6403, -6244, 2178, 2513, -4262, -5720, 1687, 1734, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 8.2334598118904978e-05, 0.00013430461694952101, 0.00012271148443687707, 5.484930079546757e-05, 4.8348680138587952e-05, 8.1251761002931744e-05, 0.00023973720089998096, 0.00015239986532833427, 9.0779023594222963e-05, 9.5344730652868748e-05, 0.00013401004252955317, 0.00011578566045500338, 0.00014841833035461605, 0.00011201046436326578, 0.00012533465633168817, 7.7823257015552372e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*3*8] = { 
  /* [0][0][][] */ 5,7,45,-73,-70,-47,27,-45, 11,-85,8,-41,-127,-81,2,-6, 0,-25,30,-64,-124,-35,16,-44, 
  /* [1][0][][] */ -99,-63,-74,-24,-127,-82,16,-4, -98,-39,-41,-17,-45,-80,-7,24, -25,-27,-39,-36,-111,-124,-5,26, 
  /* [2][0][][] */ -20,-68,5,-75,-92,-127,14,-9, -24,-19,-18,-39,-104,-116,7,24, -41,-56,-17,-46,-13,-64,38,0, 
  /* [3][0][][] */ -93,-80,-35,-71,-13,-33,-127,2, -104,-91,-40,11,-33,-79,-49,-34, -116,-33,-64,-92,-44,-50,-45,-59, 
  /* [4][0][][] */ -30,-66,-48,-55,-127,-94,-3,-35, -89,-104,-65,-77,-62,-18,-6,-41, 5,16,8,-82,-57,-14,-23,-36, 
  /* [5][0][][] */ -127,-10,-16,-4,-50,-61,-41,6, -61,-8,-49,-96,-10,-8,-74,-35, -93,10,-25,5,-32,-30,-97,-28, 
  /* [6][0][][] */ 9,-69,-50,-5,-67,-90,-48,-44, 4,-42,-83,-7,-75,-51,-51,-15, 10,-69,-51,-5,-62,-57,-127,-83, 
  /* [7][0][][] */ -127,-49,-10,-64,-21,-6,5,31, -98,-13,-38,25,-13,-24,-47,-30, -111,-44,-29,21,-12,-38,-41,-33, 
  /* [8][0][][] */ -61,-90,-115,21,-65,-73,-4,-63, -107,-27,-58,57,19,-38,-106,-16, -127,-120,-55,-59,-25,1,-54,-79, 
  /* [9][0][][] */ -127,-26,-49,-16,-51,-14,-33,-53, -92,-56,-80,-18,-66,-19,-72,-53, -109,-36,-61,11,-58,-29,-63,-29, 
  /* [10][0][][] */ -56,-115,-127,-23,-84,-100,-6,1, -58,-119,-61,6,-38,-75,-15,-34, -11,-60,-70,6,-38,-20,-44,9, 
  /* [11][0][][] */ -17,-69,-122,20,-89,-110,-55,-68, -11,-107,-127,-1,-87,-44,-33,-9, -18,-81,-105,13,-86,-76,0,-5, 
  /* [12][0][][] */ -127,-23,-42,11,-35,-17,-46,-67, -49,-7,-51,-35,-74,6,-60,-71, -74,1,-15,-17,-17,-16,-42,-18, 
  /* [13][0][][] */ 8,-127,13,-64,-24,-84,-19,-89, -23,-35,-29,-24,-102,-82,-22,-125, -43,-50,33,-53,-67,-38,-50,6, 
  /* [14][0][][] */ 20,-54,19,-4,-49,-20,-19,-20, -11,-38,-2,-8,-34,-29,-5,-72, 16,-101,-10,-5,-28,-80,-49,-127, 
  /* [15][0][][] */ -32,4,14,-127,-37,2,-3,10, -24,11,1,-100,11,4,28,10, -30,-20,6,-127,5,11,22,18, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0055882465094327927, 0.0091155767440795898, 0.0083287227898836136, 0.0037227536085993052, 0.0032815409358590841, 0.0055147521197795868, 0.016271539032459259, 0.010343744419515133, 0.0061613898724317551, 0.0064712758176028728, 0.0090955831110477448, 0.0078586507588624954, 0.010073508135974407, 0.0076024187728762627, 0.0085067637264728546, 0.0052820509299635887, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[8] = { -2744, -1206, -16277, -178797, 19143, 20654, 472, -248, };
const TfArray<1, int> tensor_dimension10 = { 1, { 8 } };
const TfArray<8, float> quant10_scale = { 8, { 2.7478828997118399e-05, 3.1870571547187865e-05, 2.4478071281919256e-05, 1.1691504369082395e-05, 4.4938769860891625e-05, 4.4434316805563867e-05, 2.8182061214465648e-05, 2.3865868570283055e-05, } };
const TfArray<8, int> quant10_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[8*1*3*32] = { 
  /* [0][0][][] */ 58,83,107,-61,-63,12,9,45,30,0,10,-22,-99,-104,-127,-37,-38,1,0,61,52,39,6,28,39,18,16,6,50,1,-36,-74, 4,89,99,-57,-36,37,-40,47,47,-14,16,-11,-104,-127,-72,-20,-32,-20,12,47,49,52,6,28,28,18,-16,38,14,25,-10,-71, 19,70,127,-41,-27,-1,-15,61,31,-20,38,-37,-100,-83,-115,-44,-67,-37,19,38,59,47,10,23,-20,20,10,18,36,26,-35,-84, 
  /* [1][0][][] */ -4,-1,1,-5,8,-16,-16,25,30,3,-34,-70,41,-33,-18,-13,49,-1,-32,-54,-57,-127,-99,-66,-38,-94,-81,-28,-56,-48,-65,-47, -24,35,100,3,-40,-2,-17,-29,-74,28,-17,-1,-17,28,23,-40,1,-6,-110,-60,-26,-34,-123,-8,30,-107,-76,-6,-58,2,-30,19, 21,-82,26,11,-47,-22,-27,-97,-46,-12,-10,-84,-27,-34,-54,-23,-52,17,-35,-28,-56,-46,-55,-67,-118,-22,-1,-18,-24,-6,-26,-56, 
  /* [2][0][][] */ -14,-10,16,-10,-5,-3,-3,-56,-69,-93,-86,-127,-1,-94,-4,-16,43,-6,50,41,83,23,59,92,39,-51,-34,-3,-46,-118,-64,-35, 24,-18,-83,-17,-47,-84,-58,-64,-43,-48,-45,-42,-32,-33,-46,1,33,83,49,18,7,27,58,56,-9,-51,-53,-25,-45,-40,-33,-25, 8,-35,-62,-6,-56,-30,0,-22,-38,-50,-45,-84,-48,2,-34,-61,9,60,1,88,71,75,119,73,58,-40,-23,-54,-70,-58,-2,-38, 
  /* [3][0][][] */ 25,42,-25,118,88,27,65,26,48,37,21,-57,54,-4,44,24,106,79,25,32,7,64,59,28,25,29,46,32,45,17,74,73, 127,-5,-13,121,41,65,48,-31,9,60,10,15,64,33,25,3,40,35,44,53,-8,34,44,10,39,-25,2,-7,48,76,1,25, 40,-5,-88,30,73,-20,44,-54,2,49,17,-19,36,49,24,-30,60,68,4,-2,-24,37,54,-6,-19,-1,13,33,9,-16,-22,60, 
  /* [4][0][][] */ -8,-9,-20,34,-7,7,-37,10,-25,-42,-32,-53,-7,-39,4,-38,-30,14,-16,-82,-66,-104,-82,-112,-24,-41,-23,16,-18,-7,3,6, 10,-6,4,-21,-26,-4,12,-34,14,-43,-34,-21,-17,-1,-11,-19,-6,4,-23,15,-62,-24,-87,-64,-36,-65,-15,-44,34,-14,-12,-54, 35,-17,6,-24,-19,-22,1,-17,-26,-31,7,3,-26,-3,-38,14,-40,-12,-46,-4,-42,-35,-61,-127,-48,-33,6,-3,-35,-21,1,-70, 
  /* [5][0][][] */ -16,27,-39,-34,-26,-24,4,-2,9,-24,-7,1,-59,-30,-37,20,-62,-50,-23,-35,-29,-15,-97,-74,-27,-12,-42,-33,-57,14,10,-29, 16,12,25,-33,12,-13,-4,-14,-19,-6,-33,24,36,-54,-26,-43,-45,-6,-8,-42,-31,-72,-85,-59,-48,-51,-58,0,-9,-31,-20,-11, -9,17,-35,8,-5,-14,-9,6,0,38,3,-42,-42,-4,-9,-4,-9,-5,-3,-56,-36,-36,-74,-127,-4,-20,-18,-21,-11,-1,10,26, 
  /* [6][0][][] */ 44,-79,-111,9,-13,-45,-12,-83,-61,-20,-44,5,32,47,54,16,26,-29,-25,-89,-9,-2,26,5,26,-3,-9,-73,-56,-72,-10,41, -43,-9,19,-37,14,-84,-56,-41,-5,-44,-8,-11,57,55,87,10,17,-2,-70,-36,-23,-40,-1,37,36,22,-28,9,-63,-6,-55,31, -40,-8,-39,-9,-127,-23,-72,-50,-98,-41,-26,16,75,62,68,6,-15,-47,-53,-52,-50,-22,12,1,3,14,-3,-8,-84,-55,12,24, 
  /* [7][0][][] */ -2,-27,-35,30,-3,-32,56,-50,-14,38,14,77,86,38,96,37,-4,-29,-23,-34,-108,-58,-75,-53,-59,-24,-44,35,-70,-21,-78,26, -3,-103,-22,51,-20,-78,-42,-110,-51,8,-7,28,102,76,36,6,-26,-62,8,-43,-13,-21,-43,-38,9,-70,15,-2,-51,-23,-54,115, 47,-1,-93,32,-30,-34,-51,-36,-32,-18,49,17,93,104,66,-52,47,-69,-68,-26,-69,-34,-55,-56,-42,-7,-34,-36,-127,-72,34,80, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 8,1,3,32 } };
const TfArray<8, float> quant11_scale = { 8, { 0.0076009235344827175, 0.0088157244026660919, 0.0067708832211792469, 0.0032339890021830797, 0.012430520728230476, 0.012290983460843563, 0.0077954446896910667, 0.0066015417687594891, } };
const TfArray<8, int> quant11_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,322,32 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0036151960957795382, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,322,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.014733529649674892, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,322,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.014733529649674892, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,161,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.014733529649674892, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,161,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.014733529649674892, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,161,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.0048336763866245747, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,161,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.0048336763866245747, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,81,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.0048336763866245747, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,1296 } };
const TfArray<1, float> quant20_scale = { 1, { 0.0048336763866245747, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,3 } };
const TfArray<1, float> quant21_scale = { 1, { 0.3564448356628418, } };
const TfArray<1, int> quant21_zero = { 1, { 91 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,3 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,11,10 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,9,8 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,7,6 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 10304), (TfLiteIntArray*)&g0::tensor_dimension0, 10304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 3888, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 10304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 10304), (TfLiteIntArray*)&g0::tensor_dimension13, 2576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 2576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2576), (TfLiteIntArray*)&g0::tensor_dimension15, 1288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 1288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2576), (TfLiteIntArray*)&g0::tensor_dimension17, 2576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 2576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2576), (TfLiteIntArray*)&g0::tensor_dimension19, 1296, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 1296, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1296), (TfLiteIntArray*)&g0::tensor_dimension21, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension22, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 23, };
const size_t tflNodes_subgraph_index[] = {0, 11, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  22, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
